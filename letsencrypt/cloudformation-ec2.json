{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Create an EC2 instance for Let's Encrypt",

  "Parameters" : {
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },
    "DomainEC2": {
      "Description" : "Domain name for ec2 instance",
      "Type": "String"
    },
    "DomainELB": {
      "Description" : "Domain name for ELB",
      "Type": "String"
    }

  },

  "Mappings" : {
    "AWSRegionArch2AMI"  : {
      "us-east-1"        : { "HVM64" : "ami-60b6c60a", "ubuntu" : "ami-fce3c696", "az" : "us-east-1b"},
      "eu-west-1"        : { "HVM64" : "ami-bff32ccc", "ubuntu" : "ami-f95ef58a", "az" : "eu-west-1a"}
    }
  },

  "Resources" : {
    "EC2Instance" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "files" : {
              "/etc/nginx/sites-enabled/letsencrypt.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "server {\n",
                  "\tlisten 80;\n",
                  "\tlisten 443 ssl;\n",
                  "\tserver_name ", {"Ref": "DomainEC2"}, ";\n",
                  "\tssl_certificate /etc/letsencrypt/live/", {"Ref": "DomainEC2"}, "/fullchain.pem;\n",
                  "\tssl_certificate_key /etc/letsencrypt/live/", {"Ref": "DomainEC2"}, "/privkey.pem;\n",
                  "\troot /usr/share/nginx/html;\n",
                  "\tindex index.html index.htm;\n",
                  "}\n"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/usr/share/nginx/html/index.html" : {
                "content" : { "Fn::Join" : ["", [
                  "<!DOCTYPE html>\n",
                  "<html><head>\n",
                  "<title>Welcome to nginx!</title>\n",
                  "<style> body { width: 800px; margin: 0 auto; } </style>\n",
                  "</head>\n",
                  "<body>\n",
                  "<h1>Let's Encrypt</h1>\n",
                  "<img src=\"logo.png\" />\n",
                  "</body></html>"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/usr/share/nginx/html/logo.png" : {
                "source" : "https://raw.githubusercontent.com/jerep6/https/master/letsencrypt/breizhcamp-logo.png"
              }
            }
          }
        }
      },
      "Properties" : {
        "InstanceType" : "t2.micro",
        "IamInstanceProfile": { "Ref": "EC2Profile" },
        "SecurityGroupIds" : [ { "Fn::GetAtt" : ["InstanceSecurityGroup", "GroupId" ] } ],
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" }, "ubuntu" ] },
        "Tags" : [{ "Key" : "Name", "Value" : "letsencrypt" }],
        "UserData": { "Fn::Base64" :
          {"Fn::Join": [ "", [
            "#!/bin/bash\n",
            "echo \"Run begin $(date)\" >> /tmp/run.txt\n",
            "export LC_ALL=en_US.UTF-8\n",
            "echo 'export LC_ALL=en_US.UTF-8' >> /etc/bash.bashrc\n",

            "aptitude update && aptitude install -y nginx git awscli ruby python-pip\n",
            "gem install domainatrix aws-sdk pry awesome_print\n",
            "rm /etc/nginx/sites-enabled/default\n",

            "git clone https://github.com/letsencrypt/letsencrypt /tmp/letsencrypt-official\n",
            "cd /tmp/letsencrypt-official && ./letsencrypt-auto --help\n",
            "\n",
            "git clone https://github.com/lukas2511/letsencrypt.sh /tmp/letsencrypt.sh\n",
            "wget https://raw.githubusercontent.com/jerep6/https/master/letsencrypt/hook-dns-01.rb -O /tmp/letsencrypt.sh/hook-dns-01.rb\n",
            "chmod +x /tmp/letsencrypt.sh/hook-dns-01.rb\n",

            "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
            "cfn-init -v -s ", { "Ref" : "AWS::StackName" },
            " -r EC2Instance",
            " --region ", { "Ref" : "AWS::Region" }, "\n",
            "echo \"Run end $(date)\" >> /tmp/run.txt"
          ] ]}
        }
      }
    },

    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH access via port HTTP, HTTPS and SSH",
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "443",
            "ToPort" : "443",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : "0.0.0.0/0"
          }]
      }
    },

    "ELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "LoadBalancerName": "letsencrypt-elb",
        "AvailabilityZones": [{ "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" }, "az" ] }],
        "ConnectionDrainingPolicy": {
          "Enabled" : true,
          "Timeout" : "300"
        },
        "CrossZone": true,
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "10",
          "Target": "TCP:80",
          "Timeout": "5",
          "UnhealthyThreshold": "5"
        },
        "Listeners": [{
          "InstancePort": "80",
          "InstanceProtocol": "http",
          "LoadBalancerPort": "80",
          "Protocol": "http"
        }],
        "SecurityGroups": [{ "Fn::GetAtt": ["ELBSecurityGroup", "GroupId"]}],
        "Scheme" : "internet-facing",
        "Instances": [{"Ref": "EC2Instance"}]
      }
    },

    "ELBSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription": "security group",
        "SecurityGroupIngress" : [{
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : "0.0.0.0/0"
        },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "443",
            "ToPort" : "443",
            "CidrIp" : "0.0.0.0/0"
          }
        ]
      }
    },


    "IPAddress" : {
      "Type" : "AWS::EC2::EIP"
    },

    "IPAssoc" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "InstanceId" : { "Ref" : "EC2Instance" },
        "EIP" : { "Ref" : "IPAddress" }
      }
    },


    "EC2Profile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [{
          "Ref": "EC2Role"
        }],
        "Path": "/"
      }
    },
    "EC2Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": ["ec2.amazonaws.com"]
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/AdministratorAccess"]
      }
    },
    "DNS": {
      "Type": "AWS::Route53::RecordSetGroup",
      "Properties": {
        "HostedZoneId": "Z1YU7ELN5AGQ2F",
        "RecordSets": [
          {
            "Name": {"Ref": "DomainEC2"},
            "Type": "A",
            "TTL": "10",
            "ResourceRecords": [{ "Ref" : "IPAddress" }]
          },
          {
            "Name": {"Ref": "DomainELB"},
            "Type": "CNAME",
            "TTL": "10",
            "ResourceRecords": [{ "Fn::GetAtt": ["ELB", "DNSName"]}]
          }
        ]
      }
    }
  },


  "Outputs" : {
    "InstanceId" : {
      "Description" : "InstanceId of the newly created EC2 instance",
      "Value" : { "Ref" : "EC2Instance" }
    },
    "AZ" : {
      "Description" : "Availability Zone of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "EC2Instance", "AvailabilityZone" ] }
    },
    "PublicDNS" : {
      "Description" : "Public DNSName of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "EC2Instance", "PublicDnsName" ] }
    },
    "PublicIP" : {
      "Description": "Public IP address of the newly created EC2 instance",
      "Value": { "Fn::GetAtt": [ "EC2Instance", "PublicIp" ] }
    },
    "EC2RoleArn": {
      "Description": "EC2Role created in the Environment AWS Account",
      "Value": { "Fn::GetAtt" : [ "EC2Role", "Arn" ] }
    },
    "ELBId": {
      "Description": "Id of the newly created ELB",
      "Value": {"Ref": "ELB"}
    },
    "ELBDNS": {
      "Description": "Public DNS the newly created ELB",
      "Value": { "Fn::GetAtt": ["ELB", "DNSName"]}
    },
    "DomainEC2": {
      "Description": "Domain of ec2 instance",
      "Value": { "Ref": "DomainEC2"}
    },
    "DomainELB": {
      "Description": "Domain of elb",
      "Value": { "Ref": "DomainELB"}
    }
  }
}
